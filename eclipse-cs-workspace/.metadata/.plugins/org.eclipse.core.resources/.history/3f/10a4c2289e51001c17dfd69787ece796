package checkout_system;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javafx.scene.control.*;
import java.sql.*;

public class Server {

    private final ExecutorService pool;
    private final List<Client> clients;
    public Queue<String> queue = new LinkedList<>();
    private final int port;
    private boolean stop;
    private TextArea display;
    private int clientsIndex = 1;
    int itemId;
    int total = 0;
    int amount = 0;
    String phoneNumber = null;
    String pin = null;
    String cardNumber = null;
    String cardPin = null;
    boolean member = false;

    Server(int port, TextArea display) {
        this.port = port;
        this.display = display;
        pool = Executors.newFixedThreadPool(3);
        clients = new ArrayList<>();
    }

    private void runServer() {

        writeToDisplay("Server enabled: Waiting for client...");
        
        try{
            ServerSocket serverSocket = new ServerSocket(port);
            stop = false;

            while (!stop) {
                Socket clientSocket = serverSocket.accept();
                writeToDisplay("client connected!");
                ServerThread thread = new ServerThread(clientSocket, this.display, this, this.clientsIndex);
                pool.execute(thread);
                clients.add(new Client(thread));
            }
            
            if (stop) {
            	serverSocket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public void writeToDisplay(String msg) {
    	String text = this.display.getText();
    	
    	text += "\n" + msg;
    	
    	this.display.setText(text);
    }

    public void stop(){
        for( Client client : clients) {
            client.thread.stopServerTread();
        }
        stop = true;
        pool.shutdown();
    }

    public void activate(){
        new Thread(()->runServer()).start();
    }
    
    public void setAppName(String name, int relativeId) {
    	for (Client client : clients) {
    		if (client.thread.relativeId == relativeId) {
    			client.name = name;
    		}
    	}
    }
    
    public void queueListener(Server server) {
		Boolean remove = false;
		
		while (!remove) {
			String value = null;
			
			try {
				value = server.queue.remove();
	    		
	    		String[] result = value.split(",");
	    		
	    		String msg = "";
				
				for (String str : result) {
					msg += str + ",";
				}
				
	    		server.onMessage(result, msg);
			} catch (Exception e) {
				// do nothing
			}
		}
	}
    
    public void onMessage(String[] values, String msg) {
		String type = values[0];
		String name = values[values.length - 1];
		Client cd = getClient("customer_display");
		Client cr = getClient("cashier_register");
		Client pas = getClient("payment_authorization_system");
		
		if (name == "cashier_register") {
			if (type == "scale") {
				// TODO: save id and send name to cd
				itemId = Integer.parseInt(values[1]);
				sendMsg(cd, "scale, " + values[2]);
			} else if (type == "get-scale") {
				// TODO: send saved id and amount to cr
				if (amount != 0) {
					sendMsg(cr, String.join(",", "scale", Integer.toString(itemId), Integer.toString(amount)));
				}
			} else if (type == "total") {
				// TODO: add item to cart total
				total += Integer.parseInt(values[1]);
			} else if (type == "get-total") {
				// TODO: send saved cart total
				sendMsg(cr, String.join(",", "total", Integer.toString(total)));
			} else if (type == "display") {
				sendMsg(cd, msg);
			} else if (type == "payment") {
				sendMsg(cd, msg);
			} else if (type == "member") {
				sendMsg(cd, msg);
			}
		} else if (name == "customer_display") {
			if (type == "scale") {
				// TODO: get amount from cd and save amount
				amount = Integer.parseInt(values[1]);
			} else if (type == "cart") {
				sendMsg(cr, msg);
			} else if (type == "member") {
				// TODO: verify phone number and send pin message to cd
				phoneNumber = values[1];
				boolean valid = verifyData("members", "members", "phone", values[1]);
				
				if (valid) {
					sendMsg(cd, "pin");
				}
			} else if (type == "pin") {
				// TODO: check pin and if valid then save phone number and add earned credits to record
				pin = values[1];
				boolean valid = verifyData("members", "members", "pin", values[1]);
				
				if (valid) {
					member = true;
				}
			} else if (type == "payment") {
				// TODO: authorize payment if valid process payment else send error to cd and cr
				cardNumber = values[1];
				cardPin = values[2];
				
				sendMsg(pas, String.join(",", "authorize", cardNumber, cardPin));
			}
		} else if (name == "payment_authorization_system") {
			if (type == "authorize") {
				if (values[1] == "card-authorized") {
					sendMsg(pas, String.join(",", "process-payment", cardNumber, Integer.toString(total)));
				}
			} else if (type == "process-payment") {
				if (values[1] == "success") {
					sendMsg(cr, "payment");
				} else {
					// TODO: send cr and cd error messages
				}
			} else if (type == "error") {
				if (values[1] == "card-number") {
					sendMsg(cd, String.join(",", "error", "payment-error", "card-number"));
					sendMsg(cr, String.join(",", "error", "payment-error", "card-number"));
				} else {
					sendMsg(cd, String.join(",", "error", "payment-error", "pin-number"));
					sendMsg(cr, String.join(",", "error", "payment-error", "pin-number"));
				}
			}
		}
	}
    
    public boolean verifyData(String addr, String table, String column, String value) {
    	String dbAddr = "jdbc:sqlite:" + addr + ".db";
    	Connector db;
    	Connection conn;
    	
    	db = new Connector(dbAddr);
		conn = db.getConnection();
		
		try {
			PreparedStatement stmt = conn.prepareStatement("SELECT * FROM ? WHERE ? = ? LIMIT 1");
			stmt.setString(1, table);
			stmt.setString(2, column);
			stmt.setString(3, value);
			
			ResultSet rs = stmt.executeQuery();
			
			String result = rs.getString(column);
			
			if (result == value) {
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
    }
    
    public void sendMsg(Client client, String msg) {
    	client.thread.queue.add(msg);
    }
    
    private Client getClient(String name) {
    	for (Client client : this.clients) {
    		if (client.name == name) {
    			return client;
    		}
    	}
    	
    	return null;
    }
    

    /*
     * cart - cd
     * scale - cr, cd
     * get-scale - cr
     * member - cr, cd
     * pin - cd
     * total - cr
     * get-total - cr
     * display - cr
     * payment - cr, cd
     */
    
}